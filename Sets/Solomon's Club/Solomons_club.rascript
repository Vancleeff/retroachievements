// Dark Savior
// #ID = 5376

LvlCompletion = [
    {"text" : "1-1", "level": 0x0, "room": 0x0, "address": bit0(0xc108)}, 
    {"text" : "1-2", "level": 0x0, "room": 0x1, "address": bit1(0xc108)}, 
    {"text" : "1-3", "level": 0x0, "room": 0x2, "address": bit2(0xc108)}, 
    {"text" : "1-4", "level": 0x0, "room": 0x3, "address": bit3(0xc108)}, 
    {"text" : "1-5", "level": 0x0, "room": 0x4, "address": bit4(0xc108)}, 
    {"text" : "1-6", "level": 0x0, "room": 0x5, "address": bit5(0xc108)}, 
    {"text" : "1-7", "level": 0x0, "room": 0x6, "address": bit6(0xc108)}, 
    {"text" : "1-8", "level": 0x0, "room": 0x7, "address": bit7(0xc108)}, 
    {"text" : "1-9", "level": 0x0, "room": 0x8, "address": bit0(0xc107)}, 
    {"text" : "1-10", "level": 0x0, "room": 0x9, "address": bit1(0xc107)}, 
    {"text" : "2-1", "level": 0x1, "room": 0x0, "address": bit0(0xc10c)}, 
    {"text" : "2-2", "level": 0x1, "room": 0x1, "address": bit1(0xc10c)}, 
    {"text" : "2-3", "level": 0x1, "room": 0x2, "address": bit2(0xc10c)}, 
    {"text" : "2-4", "level": 0x1, "room": 0x3, "address": bit3(0xc10c)}, 
    {"text" : "2-5", "level": 0x1, "room": 0x4, "address": bit4(0xc10c)}, 
    {"text" : "2-6", "level": 0x1, "room": 0x5, "address": bit5(0xc10c)}, 
    {"text" : "2-7", "level": 0x1, "room": 0x6, "address": bit6(0xc10c)}, 
    {"text" : "2-8", "level": 0x1, "room": 0x7, "address": bit7(0xc10c)}, 
    {"text" : "2-9", "level": 0x1, "room": 0x8, "address": bit0(0xc10b)}, 
    {"text" : "2-10", "level": 0x1, "room": 0x9, "address": bit1(0xc10b)}, 
    {"text" : "3-1", "level": 0x2, "room": 0x0, "address": bit0(0xc110)}, 
    {"text" : "3-2", "level": 0x2, "room": 0x1, "address": bit1(0xc110)}, 
    {"text" : "3-3", "level": 0x2, "room": 0x2, "address": bit2(0xc110)}, 
    {"text" : "3-4", "level": 0x2, "room": 0x3, "address": bit3(0xc110)}, 
    {"text" : "3-5", "level": 0x2, "room": 0x4, "address": bit4(0xc110)}, 
    {"text" : "3-6", "level": 0x2, "room": 0x5, "address": bit5(0xc110)}, 
    {"text" : "3-7", "level": 0x2, "room": 0x6, "address": bit6(0xc110)}, 
    {"text" : "3-8", "level": 0x2, "room": 0x7, "address": bit7(0xc110)}, 
    {"text" : "3-9", "level": 0x2, "room": 0x8, "address": bit0(0xc10f)}, 
    {"text" : "3-10", "level": 0x2, "room": 0x9, "address": bit1(0xc10f)}, 
    {"text" : "4-1", "level": 0x3, "room": 0x0, "address": bit0(0xc114)}, 
    {"text" : "4-2", "level": 0x3, "room": 0x1, "address": bit1(0xc114)}, 
    {"text" : "4-3", "level": 0x3, "room": 0x2, "address": bit2(0xc114)}, 
    {"text" : "4-4", "level": 0x3, "room": 0x3, "address": bit3(0xc114)}, 
    {"text" : "4-5", "level": 0x3, "room": 0x4, "address": bit4(0xc114)}, 
    {"text" : "4-6", "level": 0x3, "room": 0x5, "address": bit5(0xc114)}, 
    {"text" : "4-7", "level": 0x3, "room": 0x6, "address": bit6(0xc114)}, 
    {"text" : "4-8", "level": 0x3, "room": 0x7, "address": bit7(0xc114)}, 
    {"text" : "4-9", "level": 0x3, "room": 0x8, "address": bit0(0xc113)}, 
    {"text" : "4-10", "level": 0x3, "room": 0x9, "address": bit1(0xc113)},  
    {"text" : "5-1", "level": 0x4, "room": 0x0, "address": bit0(0xc118)}, 
    {"text" : "5-2", "level": 0x4, "room": 0x1, "address": bit1(0xc118)}, 
    {"text" : "5-3", "level": 0x4, "room": 0x2, "address": bit2(0xc118)}, 
    {"text" : "5-4", "level": 0x4, "room": 0x3, "address": bit3(0xc118)}, 
    {"text" : "5-5", "level": 0x4, "room": 0x4, "address": bit4(0xc118)}, 
    {"text" : "5-6", "level": 0x4, "room": 0x5, "address": bit5(0xc118)}, 
    {"text" : "5-7", "level": 0x4, "room": 0x6, "address": bit6(0xc118)}, 
    {"text" : "5-8", "level": 0x4, "room": 0x7, "address": bit7(0xc118)}, 
    {"text" : "5-9", "level": 0x4, "room": 0x8, "address": bit0(0xc117)}, 
    {"text" : "5-10", "level": 0x4, "room": 0x9, "address": bit1(0xc117)}, 
]

Level = byte(0xc100)
Room = byte(0xc101)
Timer = word(0xffc0)

//FUNCTIONS
//Build and return requirements to checks if two arrays contain same values
//src: the array of value to compare
//with: data source
//mode: 1 => equals, 2 => different
function CompareArrays(src, with, mode){
  res = []
  if(mode == 1)
  {
    for i in range(0, length(src) - 1) {
       array_push(res, src[i] == with[i])
    }
  }else{
    for i in range(0, length(src) - 1) {
       array_push(res, src[i] != with[i])
    }
  }
    
  return res
}

//Check if the player is on the Title Screen or Pause Menu
//Mode define if the player is on the menu or not
function OnMenu(mode){
    if(mode == 1)
    {
        //BUILD LOGIC
    }else{
        //BUILD LOGIC
    }
}


//Check if the player is in the game and not on the Title Screen or the Credits. 
//It also checks if the player is not loading a save to prevent save exploits.
function InGame(){
    return 
        Level_Pointer != 0x0 &&
        InGame == 1
}

//Check if the value of an adress switch from 0 to 1
function switchON(address){
    return prev(address) == 0x00 && address == 0x01
}

//Check if the value of an adress switch from 1 to 0
function switchOFF(address){
    return prev(address) == 0x01 && address == 0x00
}

//Check if address increased to (or beyond) target since last frame
function PrevIncreasedTo(address, target){
    return prev(address) < target && address >= target
}

//Used to check if a skill increased to a specific target when level up. prior <= target is used because the game increase 
//every skills at each level up.
function PriorIncreasedTo(address, target){
    return prior(address) <= target && address >= target
}

//Check if address increased from one value to another one since last frame
function PrevFromTo(address, from, to){
    return prev(address) == from && address == to
}

//Check if address increased from one value to another one since last changed value
function PriorFromTo(address, from, to){
    return prior(address) == from && address == to
}

//Check if address increased since last frame
function PrevIncreased(address){
    return address > prev(address)
}

//Check if address decreased since last frame
function PrevDecreased(address){
    return address < prev(address)
}

function PrevIncreasedBy(address, amount){
    return (address - prev(address)) == amount
}

function PriorIncreasedBy(address, amount){
    return (address - prior(address)) == amount
}

function PrevDecreasedBy(address, amount){
    return (prev(address) - address) == amount
}

function PriorDecreasedBy(address, amount){
    return (prior(address) - address) == amount
}

//Check if address didn't changed since last frame
function PrevNotChanged(address){
    return address == prev(address)
}

//Check if address didn't changed prior to this call
function PriorNotChanged(address){
    return address == prior(address)
}

//ACHIEVEMENTS 

//Capture Achievements

for i in range(0, length(LvlCompletion)) {
   achievement("Level " + LvlCompletion[i]["text"],"Complete level " + LvlCompletion[i]["text"], 2, 
    (
        prev(LvlCompletion[i]["address"]) == 0 &&
        LvlCompletion[i]["address"] == 1 &&
        Level == LvlCompletion[i]["level"] &&
        Room == LvlCompletion[i]["room"] &&
        prior(Timer) != 0xffff
    ))
}


